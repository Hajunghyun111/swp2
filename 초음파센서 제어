#include <Servo.h>

// Pin assignments
#define PIN_LED   9   
#define PIN_TRIG  12  
#define PIN_ECHO  13  
#define PIN_SERVO 10  

// Parameters
#define SND_VEL 346.0    
#define INTERVAL 25     
#define PULSE_DURATION 10 
#define _DIST_MIN 180.0  // 18 cm
#define _DIST_MAX 360.0  // 36 cm
#define TIMEOUT ((INTERVAL / 2) * 1000.0) 
#define SCALE (0.001 * 0.5 * SND_VEL) 

#define _EMA_ALPHA 0.5    

Servo myservo;
float dist_ema = _DIST_MAX, dist_prev = _DIST_MAX;
unsigned long last_sampling_time;

void setup() {
  pinMode(PIN_LED, OUTPUT);
  pinMode(PIN_TRIG, OUTPUT);
  pinMode(PIN_ECHO, INPUT);
  digitalWrite(PIN_TRIG, LOW); 

  myservo.attach(PIN_SERVO); 
  myservo.write(0);  

  Serial.begin(57600);
}

void loop() {
  if (millis() < (last_sampling_time + INTERVAL))
    return;

  float dist_raw = USS_measure(PIN_TRIG, PIN_ECHO);

  if (dist_raw < _DIST_MIN || dist_raw > _DIST_MAX) {
    dist_raw = dist_prev;
    digitalWrite(PIN_LED, HIGH); // LED OFF
  } else {
    dist_prev = dist_raw;
    digitalWrite(PIN_LED, LOW);  // LED ON
  }

  dist_ema = _EMA_ALPHA * dist_raw + (1 - _EMA_ALPHA) * dist_ema;

  int servo_angle = map(dist_ema, _DIST_MIN, _DIST_MAX, 0, 180);
  servo_angle = constrain(servo_angle, 0, 180);
  myservo.write(servo_angle);

  // 플로터를 고려한 시리얼 출력 형식
  Serial.print("Min:");  Serial.print(_DIST_MIN);
  Serial.print(",dist:"); Serial.print(dist_raw);
  Serial.print(",ema:"); Serial.print(dist_ema);
  Serial.print(",Servo:"); Serial.print(myservo.read());
  Serial.print(",Max:"); Serial.print(_DIST_MAX);
  Serial.println("");

  last_sampling_time += INTERVAL;
}

float USS_measure(int TRIG, int ECHO) {
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);
  
  return pulseIn(ECHO, HIGH, TIMEOUT) * SCALE; 
}
